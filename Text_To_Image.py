# -*- coding: utf-8 -*-
"""texttoimage

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XLFvZOUhdmb5Jq5wzEzUiA2wCFWNvnRH
"""

!pip install diffusers transformers gradio accelerate safetensors

from diffusers import StableDiffusionPipeline
from transformers import BlipProcessor, BlipForConditionalGeneration
import torch, gradio as gr
from PIL import Image

# Load text-to-image model (Stable Diffusion)
pipe = StableDiffusionPipeline.from_pretrained(
    "runwayml/stable-diffusion-v1-5",
    torch_dtype=torch.float16
).to("cuda")

# Load image captioning model (BLIP)
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
blip_model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base").to("cpu")

# Main function: Prompt ‚Üí Image ‚Üí Caption
def generate_image_and_caption(prompt):
    # Step 1: Generate image
    image = pipe(prompt).images[0]

    # Step 2: Generate caption
    inputs = processor(image, return_tensors="pt").to("cpu")
    out = blip_model.generate(**inputs)
    caption = processor.decode(out[0], skip_special_tokens=True)

    return image, caption

# Gradio UI
gr.Interface(
    fn=generate_image_and_caption,
    inputs=gr.Textbox(label="üß† Enter a Prompt (e.g. 'A robot studying at KCET')"),
    outputs=[
        gr.Image(label="üé® AI Generated Image"),
        gr.Textbox(label="üìù AI Description")
    ],
    title="üé® Text-to-Image + Caption Generator",
    description="Enter a creative prompt. AI will generate an image and describe what it sees!",
    theme="soft"
).launch()